#!/bin/bash

# Create directory for pokemon data
mkdir -p pokemon_data

# Pok√©mon list and API URL
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
api_url="https://pokeapi.co/api/v2/pokemon"

# Function to fetch with retries
fetch_pokemon() {
    local pokemon=$1
    local retries=3
    local delay=1
    
    for (( i=1; i<=retries; i++ )); do
        if curl -s -o "pokemon_data/${pokemon}.json" "${api_url}/${pokemon}"; then
            echo "‚úÖ $pokemon fetched successfully"
            return 0
        fi
        sleep $delay
        delay=$((delay * 2))
    done
    echo "‚ùå Failed to fetch $pokemon after $retries attempts" >> errors.txt
    return 1
}

# Initialize variables
declare -A pid_map
max_parallel=3
running=0

# Main execution loop
for pokemon in "${pokemon_list[@]}"; do
    # Wait for slot if max parallel reached
    while [ $running -ge $max_parallel ]; do
        # Check completed processes
        for pid in "${!pid_map[@]}"; do
            if ! kill -0 "$pid" 2>/dev/null; then
                unset pid_map["$pid"]
                ((running--))
                echo "‚ÑπÔ∏è  ${pid_map[$pid]} finished"
            fi
        done
        sleep 0.1
    done

    # Start new fetch
    fetch_pokemon "$pokemon" &
    pid=$!
    pid_map[$pid]=$pokemon
    ((running++))
    echo "üöÄ Started fetching $pokemon (PID: $pid)"
done

# Final wait for remaining processes
for pid in "${!pid_map[@]}"; do
    wait "$pid"
    echo "‚úîÔ∏è  ${pid_map[$pid]} completed"
done

echo "All done! Results in pokemon_data/"